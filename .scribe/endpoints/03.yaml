name: 'User Management'
description: |-

  APIs for managing users in the system, including CRUD operations and restoring deleted users.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system, including CRUD operations and restoring deleted users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of the users.'
      description: 'This endpoint retrieves all users in the system. Only authorized users (based on user roles) can access this resource.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
              {
                "id": 1,
                "nickname": "JohnDoe",
                "given_name": "John",
                "family_name": "Doe",
                "email": "john@example.com",
                "company_id": 1,
                "user_type": "administrator",
                "status": "active"
              }
            ],
            "message": "Users retrieved successfully"
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system, including CRUD operations and restoring deleted users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created user in storage.'
      description: 'This endpoint validates the provided data and creates a new user in the system.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      nickname:
        name: nickname
        description: "The user's nickname (optional)."
        required: false
        example: JohnDoe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      given_name:
        name: given_name
        description: "The user's first name."
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      family_name:
        name: family_name
        description: "The user's last name."
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email. Must be unique."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Minimum 8 characters.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      company_id:
        name: company_id
        description: 'The ID of the company the user belongs to (optional).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      user_type:
        name: user_type
        description: 'The role of the user (client, staff, applicant, administrator, super-user).'
        required: true
        example: administrator
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: "The user's status (active, unconfirmed, suspended, banned, unknown)."
        required: true
        example: active
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      nickname: JohnDoe
      given_name: John
      family_name: Doe
      email: john@example.com
      password: password123
      company_id: 1
      user_type: administrator
      status: active
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "id": 2,
            "nickname": "JaneDoe",
            "given_name": "Jane",
            "family_name": "Doe",
            "email": "jane@example.com",
            "user_type": "client",
            "status": "active"
          }
        headers: []
        description: 'User created successfully'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system, including CRUD operations and restoring deleted users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified user.'
      description: 'Show the details of a specific user by ID.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 2
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "nickname": "JohnDoe",
            "given_name": "John",
            "family_name": "Doe",
            "email": "john@example.com",
            "user_type": "administrator",
            "status": "active"
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system, including CRUD operations and restoring deleted users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified user in storage.'
      description: 'Validates and updates the userâ€™s details.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 5
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      nickname:
        name: nickname
        description: 'Must not be greater than 255 characters.'
        required: false
        example: bcxopkkbqxqhkcasozbwmi
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      given_name:
        name: given_name
        description: "The user's first name."
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      family_name:
        name: family_name
        description: "The user's last name."
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email. Must be unique."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Minimum 8 characters.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      company_id:
        name: company_id
        description: 'The ID of the company the user belongs to (optional).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      user_type:
        name: user_type
        description: 'The role of the user (client, staff, applicant, administrator, super-user).'
        required: true
        example: administrator
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: "The user's status (active, unconfirmed, suspended, banned, unknown)."
        required: true
        example: active
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      nickname: bcxopkkbqxqhkcasozbwmi
      given_name: John
      family_name: Doe
      email: john@example.com
      password: password123
      company_id: 1
      user_type: administrator
      status: active
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "nickname": "JohnDoe",
            "given_name": "John",
            "family_name": "Doe",
            "email": "john@example.com",
            "user_type": "administrator",
            "status": "active"
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system, including CRUD operations and restoring deleted users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified user from storage (soft delete).'
      description: 'Marks the user as deleted (soft delete) and prevents them from accessing the system.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 17
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "nickname": "JohnDoe",
            "given_name": "John",
            "family_name": "Doe",
            "email": "john@example.com",
            "user_type": "administrator",
            "status": "deleted"
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/v1/users/{id}/restore'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system, including CRUD operations and restoring deleted users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore a soft-deleted user.'
      description: 'Restores a user that was previously soft-deleted.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user to restore.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "nickname": "JohnDoe",
            "given_name": "John",
            "family_name": "Doe",
            "email": "john@example.com",
            "status": "active"
          }
        headers: []
        description: 'User restored successfully'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
